generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model agents {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  active    Boolean @default(true)
  archive   Boolean @default(false)
  creatorId String? @db.ObjectId
  matricule String
  password  String
  username  String  @unique

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  role         backOfficeRoles[] @relation("role")
  asigned      backOfficeRoles[] @relation("asignee")
  creator      agents?           @relation("guestCreator", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  agents       agents[]          @relation("guestCreator")
  rolesCreated agentRoles[]      @relation("roleCreator")

  profile      Profile[]
  bankAccounts bankAccount[]
  bankDocs     bankDoc[]
  companies    Company[]

  @@map("agents")
}

model backOfficeRoles {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  archive Boolean @default(false)

  guestID String? @db.ObjectId
  guest   agents? @relation("role", fields: [guestID], references: [id])

  assignedBy  String? @db.ObjectId
  assignedBy_ agents? @relation("asignee", fields: [assignedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  roleID String[]     @db.ObjectId
  role   agentRoles[] @relation(fields: [roleID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("backOffice_roles")
}

model agentRoles {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  archive Boolean @default(false)
  name    String

  user_role  String[]          @db.ObjectId
  user_role_ backOfficeRoles[] @relation(fields: [user_role], references: [id])

  permissionIDs String[]           @db.ObjectId
  permissions   agentPermissions[] @relation(fields: [permissionIDs], references: [id])

  creatorID String? @db.ObjectId
  creator   agents? @relation("roleCreator", fields: [creatorID], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("agent_roles")
}

model agentPermissions {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  archive     Boolean @default(false)
  description String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  roleIDs String[]     @db.ObjectId
  role    agentRoles[] @relation(fields: [roleIDs], references: [id])

  @@map("agent_permissions")
}

model syslog {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  dateTime      DateTime? @default(now())
  appID         String?
  event         String?
  level         log_level
  description   String
  message       String?
  userAgent     String?
  sourceIP      String?
  hostIP        String?
  hostName      String?
  protocol      String?
  port          String?
  requestURI    String?
  requestMethod String?
  region        String?
  geo           String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("syslog")
}

model bankAccount {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  bankName String
  rib      String
  archive  Boolean @default(false)

  agentID String? @db.ObjectId
  agent   agents? @relation(fields: [agentID], references: [id])

  companyID String?  @db.ObjectId
  company   Company? @relation(fields: [companyID], references: [id])

  userID String? @db.ObjectId
  user   User?   @relation(fields: [userID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("bank_accounts")
}

model bankDoc {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  archive Boolean @default(false)
  url     String
  status  String  @default("pending")
  motif   String?
  comment String?

  agentID String? @db.ObjectId
  agent   agents? @relation(fields: [agentID], references: [id])

  companyID String?  @db.ObjectId
  company   Company? @relation(fields: [companyID], references: [id])

  userID String? @db.ObjectId
  user   User?   @relation(fields: [userID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("bank_docs")
}

enum log_level {
  ERROR
  SUCCESS
}

// -------------------------- Web Client Schemas -------------------------- //

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  phone    String  @unique
  email    String  @unique
  password String
  country  Country @default(MOROCCO)
  regime   Regime  @default(TPE)

  activated   Boolean   @default(false)
  activatedAt DateTime?

  archived   Boolean   @default(false)
  archivedAt DateTime?

  emailVerifiedAt DateTime?
  phoneVerifiedAt DateTime?

  profile Profile?

  tokens Token[]

  companies Company[]

  demands Demand[]

  roles       UserRole[]
  permissions UserPermission[]

  createdRoles Role[]
  BankAccounts bankAccount[]
  BankDocs     bankDoc[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Token {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  type    TokenType
  expires Int

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token, type])
  @@map("tokens")
}

model Profile {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  ref              String?
  fullName         String?
  idCardNumber     String
  idCardExpiryDate String
  dateOfBirth      String
  placeOfBirth     String
  nationality      String
  gender           Gender
  city             String
  address          String
  imageUrl         String?
  archive          Boolean @default(false)

  agentID String? @db.ObjectId
  agent   agents? @relation(fields: [agentID], references: [id])

  userID String? @unique @db.ObjectId
  user   User?   @relation(fields: [userID], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Collaborator {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collaborators")
}

model Company {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  address         String
  city            String
  country         Country
  rc              String
  cnssNumber      String
  archive         Boolean @default(false)
  idFiscal        String
  taxNumber       String
  companyCommunID String?

  agentID String? @db.ObjectId
  agent   agents? @relation(fields: [agentID], references: [id])

  userID String @db.ObjectId
  user   User   @relation(fields: [userID], references: [id])

  collaborators Collaborator[]
  bankAccounts  bankAccount[]
  bankDocs      bankDoc[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

model Demand {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  type    DemandType
  status  Status     @default(PENDING)
  comment String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  documents Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("demands")
}

model Document {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  type    DocumentType
  status  Status       @default(PENDING)
  comment String?

  demandId String @db.ObjectId
  demand   Demand @relation(fields: [demandId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

model Role {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  description String?

  createdBy String @db.ObjectId
  creator   User   @relation(fields: [createdBy], references: [id])

  users UserRole[]

  permissionsIDs String[]         @db.ObjectId
  permissions    UserPermission[] @relation(fields: [permissionsIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, createdBy])
  @@map("roles")
}

model UserRole {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  roleId String @db.ObjectId
  role   Role   @relation(fields: [roleId], references: [id])

  assignedBy String   @db.ObjectId
  assignedAt DateTime @default(now())

  @@map("users_roles")
}

model UserPermission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  permissionId String     @db.ObjectId
  permission   Permission @relation(fields: [permissionId], references: [id])

  entityId String? @db.ObjectId

  rolesIDs String[] @db.ObjectId
  roles    Role[]   @relation(fields: [rolesIDs], references: [id])

  assignedBy String   @db.ObjectId
  assignedAt DateTime @default(now())

  @@map("users_permissions")
}

model Permission {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  code        String  @unique
  description String?

  users UserPermission[]

  @@map("permissions")
}

enum Regime {
  TPE
  CPU
  AE
}

enum UserType {
  TPE
  CPU
  AE
  COLLABORATOR
}

enum Country {
  MOROCCO
  EGYPT
}

enum DocumentType {
  ID_CARD
  ID_CARD_RECTO
  ID_CARD_VERSO
  COMMERCE_REGISTER
  TAX
  FINANCE
  RIB
  ANTHROPOMETRIC
  DIPLOMA
  CNSS
  MARRIAGE_CERTIFICATE
  BIRTH_CERTIFICATE
  BANK_CHECK
  FACTURE
  TICKET
  RECEIPT
  ASSET
}

enum DemandType {
  REGISTRATION
  ADD_COMPANY
  ADD_COLLABORATOR
  ADD_BANK
}

enum Status {
  PENDING
  VERIFIED
  DECLINED
}

enum Gender {
  M
  F
}

enum TokenType {
  REFRESH
  RESET_PASSWORD
  EMAIL_VERIFICATION
}
