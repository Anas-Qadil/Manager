generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model guests {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  active    Boolean @default(true)
  archive   Boolean @default(false)
  creatorId String? @db.ObjectId
  matricule String
  password  String
  username  String  @unique

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  role         user_role[] @relation("role")
  asigned      user_role[] @relation("asignee")
  creator      guests?     @relation("guestCreator", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  guests       guests[]    @relation("guestCreator")
  rolesCreated Roles[]     @relation("roleCreator")

  @@map("guests")
}

model user_role {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  archive Boolean @default(false)

  guestID String? @db.ObjectId
  guest   guests? @relation("role", fields: [guestID], references: [id])

  assignedBy  String? @db.ObjectId
  assignedBy_ guests? @relation("asignee", fields: [assignedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  roleID String[] @db.ObjectId
  role   Roles[]  @relation(fields: [roleID], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("guest_user_role")
}

model Roles {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  archive Boolean @default(false)
  name    String

  user_role  String[]    @db.ObjectId
  user_role_ user_role[] @relation(fields: [user_role], references: [id])

  permissionIDs String[]      @db.ObjectId
  permissions   Permissions[] @relation(fields: [permissionIDs], references: [id])

  creatorID String? @db.ObjectId
  creator   guests? @relation("roleCreator", fields: [creatorID], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("guest_roles")
}

model Permissions {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  archive     Boolean @default(false)
  description String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  roleIDs String[] @db.ObjectId
  role    Roles[]  @relation(fields: [roleIDs], references: [id])

  @@map("guest_permissions")
}

model syslog {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  dateTime      DateTime? @default(now())
  appID         String?
  event         String?
  level         log_level
  description   String
  message       String?
  userAgent     String?
  sourceIP      String?
  hostIP        String?
  hostName      String?
  protocol      String?
  port          String?
  requestURI    String?
  requestMethod String?
  region        String?
  geo           String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("syslog")
}

// enum access {
//   READ
//   WRITE
//   DELETE
//   UPDATE
// }

enum log_level {
  ERROR
  SUCCESS
}